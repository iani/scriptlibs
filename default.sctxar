var o, p;
o = [
	ScriptLib.prNew,  MultiLevelIdentityDictionary.prNew,  IdentityDictionary.prNew,  Array.prNew(32),  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:ParseSpecs [freq: \\freq]
{ | amp = 0.1 | WhiteNoise.ar(0.1) }",  IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  
	Array.prNew(64),  "//:-004BufferPlaybackEnv
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	{ | gate = 1 |
		var rate = 1, env, envgen;
		env = Env.linen(0.3, 0.1, 1, 3.5);
		envgen = EnvGen.kr(env, gate: gate, doneAction: 2);
		envgen * PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1)
	}.play;
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-006OneSoundProcessAtATimeOnly
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1) {
		{ WhiteNoise.ar(0.1) }.play.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification | 
			notification.listener.free;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  "//:-003SimpleBufferPlayback
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	var rate = 1;
	{ PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1) }.play;
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.free },
port: 3001
).enable;
",  
	"//:-007OneBlobOnlyDifferentStartingPoint
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1) {
		{ WhiteNoise.ar(0.1) }.play.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification | 
			notification.listener.free;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  "//:-005EnvSynth
var b0 = 'swallows10minL'.b;

BlobWatcher(
{ | blob |
	Synth('playbuf', [buf: b0, attack: 1, release: 3]);
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-002MappingParameters
~simpleBlob = BlobWatcher(
{ | blob |
	blob.watcher.mapper.postln;
	{ | freq = 400 | SinOsc.ar(freq, 0, 0.01) }.play(args: [\\freq, blob.x_pos]);
},
{ | blob | 
	// [\"moved:\", blob].postln 
},
{ | blob | 
	blob.free
},
mapper: BlobMapper(x_pos_map: \\freq.asSpec),
port: 3001,
).enable;
",  "//:-006OneBlobOnlyDifferentStartingPoint
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1) {
		{ WhiteNoise.ar(0.1) }.play.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification | 
			notification.listener.free;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  
	"//:-006EnvDifferentStartingPoint
var b0 = 'swallows10minL'.b;

BlobWatcher(
{ | blob |
	Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos]);
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-000TestBlobs_EMPTY

~simpleBlob = BlobWatcher(
{ | blob |
	[\"started:\", blob].postln;
	blob.x_pos.postln;
},
{ | blob | [\"moved:\", blob].postln },
{ | blob | [\"ended:\", blob].postln },

port: 3001
).enable;
",  "//:-001SimpleBlobSound1
~simpleBlob = BlobWatcher(
{ | blob |
	{ | freq = 400 | SinOsc.ar(freq, 0, 0.1) }.play(args: [\\freq, 400 rrand: 4000]);
},
{ | blob | [\"moved:\", blob].postln },
{ | blob | blob.free },
port: 3001
).enable;
",  "//:---FreeAllBlobwatchers
Blobs(3001).free; // webcam
Blobs(3333).free; // kinect",  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:-02TestTrailDrawing

var window, view, trails;
window = Window(\"Blob Trails\", Rect(0, 30, 400, 400)).front;
view = window.view;
view.background = Color.white;
window.drawFunc = {
	Pen.scale(view.bounds.width, view.bounds.height);
	Pen.addRect(Rect(0.10, 0.10, 0.8, 0.8));
	trails do: { | trail |
		trail.size - 1 do: { | i | Pen.line(trail[i], trail[i + 1]); };
	};
	Pen.stroke;
};


// Just post the trail of positions of each single blob trajectory 
~trailTest = Blobs(3001).enable;
\\test.addNotifier(~trailTest, \\alive, { | blobs | 
	trails = blobs collect: _.posTrail;
	{ window.refresh; }.defer;
});

~stop = { ~trailTest.disable; window.close };",  "//:-01TestTrailPosting

// Just post the trail of positions of each single blob trajectory 
~trailTest = BlobWatcher(
{ | blob |
	[\"started:\", blob, blob.blob.posTrail.size, blob.blob.posTrail].postln;
	blob.x_pos.postln;
},
{ | blob | [\"moved:\", blob, blob.blob.posTrail.size, blob.blob.posTrail].postln },
{ | blob | [\"ended:\", blob].postln },

port: 3001
).enable;
",  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:-PlayBufWithSynthDef
var b0 = 'a11wlk01-44_1'.b;
Synth('playbuf', [buf: b0]);",  "//:-PlayBuffer
var b0 = 'swallows'.b;
{ | rate = 1 | PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1) };",  "//:Pings
{ { 100 do: { Synth(\\ping, [out: 2.rand, freq: 400.rrand(4000), dur: 0.01.exprand(1)]); 0.01.exprand(1).wait } }.fork; } ! 5;",  "//:-01SineWithFreq
{ | freq = 400 | SinOsc.ar(freq, 0, 0.1) }",  
	"//:-02PwhiteDiatonic
Pbind(\\degree, Pbrown(), \\dur, 0.1);",  "//:-00WhiteNoise
Synth('ping');",  "//:-01SineWithoutFreqControl
{ SinOsc.ar(400, 0, 0.1) }
",  IdentityDictionary.prNew,  
	Array.prNew(32),  "//:endlessRogerCormanmovie‬
var b6 = 'ChippingSparrow'.b, b7 = 'BarredOwl'.b;
fork{
  loop{
    play{
     Splay.ar(
       {Klank.ar(`[99.rand*(1..9)],Crackle.ar(2,0.01))*LFGauss.ar(9,1/4,0,0,2)}!2
     )
    };
    1.wait;
  }
}; // ‪#endlessRogerCormanmovie‬",  IdentityDictionary.prNew,  Array.prNew(32),  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:-000NewProxyList
AppModel().window({ | w, a |
	w.layout = VLayout(
		a.listView('proxies').proxyWatcher(
			startedAction: { | me | 
				me.view.colors = me.items collect: { | i | if (i.isMonitoring) { Color.red } { Color.white } }
			},
			stoppedAction: { | me |
				me.view.colors = me.items collect: { | i | if (i.isMonitoring) { Color.red } { Color.white } }
			},
		)
		.do({ | widget |
			{
				widget.updateAction(\\index, { \"index!\".postln; });
				widget.updateAction(\\list, { \"list!\".postln; });
				widget.value.items.postln do: { | item |
					widget.addNotifier(item.item, \\play, {
						widget.view.colors = widget.items collect: { | i | 
							if (i.isMonitoring) { Color.red } { Color.white } 
						};
					});
					widget.addNotifier(item.item, \\stop, {
						widget.view.colors = widget.items collect: { | i | 
							if (i.isMonitoring) { Color.red } { Color.white } 
						};
					});
				};
				widget.view.action_({ | me |
					widget.value.index_(nil, me.value);
				});
			}.defer(0.5)
		})
		.view,
		a.listView('proxies').proxyList(ProxyCentral.default.proxySpace)
		.view
	)
});
",  "//:-001ProxyControls (+ Tabbed View)

AppModel().window({ | w, a |
	var font, stripWidth = 80, numStrips = 8, winWidth;
	winWidth = stripWidth * numStrips;
	font = Font.default.size_(10);
	w.name_(\"Proxy Script Mixer\")
	.bounds_(Rect(Window.screenBounds.width - winWidth, 0, winWidth, 250))
	.layout = HLayout(
		*({ | i | VLayout(
			a.popUpMenu(format(\"proxy%\", i).asSymbol).proxyList(ProxyCentral.default.proxySpace, i)
			.view.fixedWidth_(80).font_(font).background_(Color(0.9, 1, 0.9)),
			a.popUpMenu(format(\"knob%\", i).asSymbol).proxyControlList(format(\"proxy%\", i).asSymbol, 3)
			.view.fixedWidth_(80).font_(font),
			a.knob(format(\"knob%\", i).asSymbol).proxyControl.view,
			HLayout(
				a.slider(format(\"slider%\", i).asSymbol).proxyControl.view.orientation_(\\vertical),
				VLayout(
					a.numberBox(format(\"knob%\", i).asSymbol).proxyControl.view.font_(font).fixedWidth_(50),
					a.numberBox(format(\"slider%\", i).asSymbol).proxyControl.view.font_(font).fixedWidth_(50),
					a.button(format(\"proxy%\", i).asSymbol)
						.action_({ \"TOODO\".postln; })
						.view.states_([[\"ed\"]]).font_(font).fixedWidth_(50),
					a.button(format(\"proxy%\", i).asSymbol).proxyWatcher
						.view.states_([[\">\"], [\"||\", nil, Color.red]]).font_(font).fixedWidth_(50),
				),
			),
			a.popUpMenu(format(\"slider%\", i).asSymbol).proxyControlList(format(\"proxy%\", i).asSymbol, 1)
			.view.fixedWidth_(80).font_(font),

		) } ! 8)
	)
})

",  
	"//:-001ProxyControls (+ Tabbed View)

AppModel().window({ | w, a |
	var font, stripWidth = 82, numStrips = 8, winWidth, mWidth = 75, nWidth = 50;
	var tabbedView;
	winWidth = stripWidth * numStrips;
	font = Font.default.size_(10);
	w.name_(\"Proxy Script Mixer\")
	.bounds_(Rect(Window.screenBounds.width - winWidth, 0, winWidth, 250));
	tabbedView = TabbedView(w, labels: [\"1-8\", \"q-i\", \"a-k\", \"z-,\"]);
	tabbedView.views do: { | view, viewNum |
	viewNum = viewNum * 8;
	view.layout = HLayout(
		*({ | i | VLayout(
			i = i + viewNum;
			a.popUpMenu(format(\"proxy%\", i).asSymbol).proxyList(ProxyCentral.default.proxySpace, i)
			.view.fixedWidth_(mWidth).font_(font).background_(Color(0.9, 1, 0.9)),
			a.popUpMenu(format(\"knob%\", i).asSymbol).proxyControlList(format(\"proxy%\", i).asSymbol, 3)
			.view.fixedWidth_(mWidth).font_(font),
			a.knob(format(\"knob%\", i).asSymbol).proxyControl.view,
			HLayout(
				a.slider(format(\"slider%\", i).asSymbol).proxyControl.view.orientation_(\\vertical),
				VLayout(
					a.numberBox(format(\"knob%\", i).asSymbol).proxyControl.view.font_(font).fixedWidth_(nWidth),
					a.numberBox(format(\"slider%\", i).asSymbol).proxyControl.view.font_(font).fixedWidth_(nWidth),
					a.button(format(\"proxy%\", i).asSymbol)
						.action_({ \"TOODO\".postln; })
						.view.states_([[\"ed\"]]).font_(font).fixedWidth_(nWidth),
					a.button(format(\"proxy%\", i).asSymbol).proxyWatcher
						.view.states_([[\">\"], [\"||\", nil, Color.red]]).font_(font).fixedWidth_(nWidth),
				),
			),
			a.popUpMenu(format(\"slider%\", i).asSymbol).proxyControlList(format(\"proxy%\", i).asSymbol, 1)
			.view.fixedWidth_(mWidth).font_(font),

		) } ! 8)
	)
	}
})

",  "//:-000TestSound2freq
{ | freq = 400 | SinOsc.ar(freq, 0, 0.1) }",  "//:-000TestSound
var b0 = 'a11wlk01'.b;
{ PlayBuf.ar(1, b0, loop: 1) };",  "//:-003Scopes
Server.default.scope;
Server.default.freqscope;",  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:PhasorEnv01

b = Buffer.loadCollection(Server.default, [1, 2, 0.5, 1, 0.75, 1.5, 1, 1.25].scramble, action: 
	{ | buffer |
		Array.rand(100, 0.5, 4);
		a = { SinOsc.ar(400 * Demand.kr(Impulse.kr(10), 0, Dbufrd(buffer, Dseries(0))), 0, 0.1) }.play;
	}
);
",  "//:PhasorEnv_NOTES

(
b = Buffer.loadCollection(Server.default, [1, 2, 0.5, 1, 0.75, 1.5, 1, 1.25].scramble, action: 
	{ | buffer |
		a = { SinOsc.ar(400 * Demand.kr(Impulse.kr(2), 0, Dbufrd(buffer, Dseries(0))), 0, 0.1) }.play;
	}
);
)



(
b = Buffer.loadCollection(Server.default, [1, 2, 0.5, 1, 0.75, 1.5, 1, 1.25].scramble, action: 
	{ | buffer |
		a = { SinOsc.ar(400 * Lag.kr(Demand.kr(Impulse.kr(2), 0, Dbufrd(buffer, Dseries(0))), 0.5), 0, 0.1) }.play;
	}
);
)

(
{
	Array.rand(100, 0.5, 4);
	a = { SinOsc.ar(400 * Demand.kr(Impulse.kr(30), 0, Drand([1, 2, 0.5, 1, 0.75, 1.5, 1, 1.25], inf)), 0, 0.1) }.play;
}
);

a = { SinOsc.ar(400 * Demand.kr(Impulse.kr(1), 0, Dbufrd(b, Dseries(0))), 0, 0.1) }.play;

",  
	"//:PhasorEnvNOTES

b = Buffer.loadCollection(Server.default, [1, 2, 0.5, 1, 0.75, 1.5, 1, 1.25].scramble, action: 
	{ | buffer |
		Array.rand(100, 0.5, 4);
		a = { SinOsc.ar(400 * Demand.kr(Impulse.kr(10), 0, Dbufrd(buffer, Dseries(0))), 0, 0.1) }.play;
	}
);
",  IdentityDictionary.prNew,  Array.prNew(32),  "//:00BufferConfig
AppModel().stickyWindow(\\test, \\buffers, { | w, app |


})",  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:EvalSnippet
ScriptLib.current.snippetValue(['---Config---', 'Buffers', 'EasternAmericanFrog']);",  "//:ScriptTest
~loop = { loop { 1.wait; \"asdf\".postln; } }.fork;

~stop = { loop.postln };",  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:-01Analyse1File
/* Should not use this as tmp is just fine. Analysis file is removed by SCMIR upon end.
SCMIR.setTempDir(\"/Users/iani2/Desktop/000SCMIRTMP/\");
*/

e = SCMIRAudioFile(Platform.resourceDir +/+ \"sounds/a11wlk01.wav\", [[MFCC, 13], [Chromagram, 12]]);
\\test.addNotifier(e, \\extractionDone, { | smaf |
	smaf.featureinfo.postln;
	smaf.featuredata.postln;
	Library.put('SCMIR_LatestAnalysis', smaf);
});
//:
{e.extractFeatures()}.fork(AppClock);


",  "//:-02DoThisAfter01ToSeeData

~smaf = Library.at('SCMIR_LatestAnalysis');
// ~smaf.inspect;
~smaf.featuredata.postln;
~smaf.featuredata.size.postln;

",  "//:-OnsetTries
e = SCMIRAudioFile(Platform.resourceDir +/+ \"sounds/a11wlk01.wav\", [[MFCC, 13], [Chromagram, 12]]);
\\test.addNotifier(e, \\extractionDone, { | smaf |
	smaf.featureinfo.postln;
	smaf.featuredata.postln; });
//:
{e.extractFeatures()}.fork(AppClock);

//:

{ e.extractOnsets(); }.fork(AppClock);

//:
e.onsetdata;
//:
e.numonsets;

//:




//:----------------------- NEED DEBUGGING: ------------------------
//:NOT!!!

e = SCMIRAudioFile(Platform.resourceDir +/+ \"sounds/a11wlk01.wav\", [[\\Loudness],[\\Transient,0.7,0.2],[\\Transient,0.1,0.05],[\\Transient,0.1,0.0],[\\Transient,0.9,0.0],[\\Transient,0.2,0.01],[\\Onsets,\\rcomplex]]);

\\test.addNotifier(e, \\extractionDone, { | smaf |
	smaf.featureinfo.postln;
	smaf.featuredata.postln; });
//:

{e.extractFeatures()}.fork(AppClock);
",  IdentityDictionary.prNew,  
	Array.prNew(32),  "//:-00BasicIdea-UsingScriptLibForData

// Getting all buffers in this ScriptLib's config: 
~scriptLib.buffers.keys.asArray.collect(BufferItem.named(_)).postln;

/*

-	Write gui to configure analysis. Functionality: 
	- Select analysis file
	- Configure list of analysis algorithms to be applied
	- For each algorithm, configure parameters, if applicable
	- Select file to save the analysis data. 
-	Where to save recorded data? Data to save are (writing here various combinations possible):  
	- default analysis configuration
	- paths of already analysed files
	- paths + algorithms of already analysed files
	- paths + algorithms + saved data of already analysed files



==== Older notes - no longer valid: 
1. Analysis sessions to be collected in folder \"Analysis\". (More details for structuring this later. )

2. Analysis results to be collected in a folder \"Features\", like this: 
Folder: Features
	File: <Buffer/Filename>
		Script name: Feature1name 
			Script code: 
				The data collected from the feature (in the case of not so big arrays)
				Or: Path to filename (in the case of large data saved as audio file)

3. Synthesis experiments to be collected in folder \"Synthesis\"

*/
",  IdentityDictionary.prNew,  Array.prNew(32),  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(128),  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:playbuf
SynthDef(\"playbuf\", { | out = 0, buf = 0, rate = 1, startPos = 0, loop = 1, attack = 0.01, release = 1, gate = 1, amp = 1 |
	var env, envgen;
	env = Env.asr(attack, 1, release);
	envgen = EnvGen.kr(env, gate, amp, doneAction: 2);
	Out.ar(out, envgen * 
		PlayBuf.ar(buf.numChannels, buf, rate * BufRateScale.kr(buf), 1, 
		startPos * BufFrames.kr(buf),
		loop, 
		doneAction: 2)
	)
}).add;",  IdentityDictionary.prNew,  
	Array.prNew(32),  "//:BootDefaultServer
Server.default.boot;
",  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:ping
SynthDef(\"ping\", { | out = 0, freq = 400, dur = 0.5, amp = 0.1 |
	Out.ar(out, 
		SinOsc.ar(freq, 0, 
			EnvGen.kr(Env.perc(releaseTime: dur - 0.01 max: 0.01, level: amp), doneAction: 2)
		)
	)
}).add;"
];
p = [
	// ScriptLib
	0, [ lib: o[1],  soundFilePath: nil ],  
	// MultiLevelIdentityDictionary
	1, [ dictionary: o[2] ],  
	// IdentityDictionary
	2, [ array: o[3],  size: 6,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	3, [ 'Tests',  o[4],  '----Narcissus----',  o[9],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-Sounds',  o[28],  '-0Dev',  o[42],  
		nil,  nil,  nil,  nil,  
		'SCMIR',  o[64],  nil,  nil,  
		nil,  nil,  '---Config---',  o[74] ],  
	// IdentityDictionary
	4, [ array: o[5],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	5, [ 'Tests',  o[6],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	6, [ array: o[7],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	7, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'ParseSpecs',  o[8],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	9, [ array: o[10],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	10, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-00BlobTests',  o[11],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-01BlobTrails+Graphics',  o[24] ],  
	// IdentityDictionary
	11, [ array: o[12],  size: 11,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	12, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-004BufferPlaybackEnv',  o[13],  
		'-006OneSoundProcessAtATimeOnly',  o[14],  '-003SimpleBufferPlayback',  o[15],  
		'-007OneBlobOnlyDifferentStartingPoint',  o[16],  '-005EnvSynth',  o[17],  
		'-002MappingParameters',  o[18],  '-006OneBlobOnlyDifferentStartingPoint',  o[19],  
		'-006EnvDifferentStartingPoint',  o[20],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-000TestBlobs_EMPTY',  o[21],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-001SimpleBlobSound1',  o[22],  
		'---FreeAllBlobwatchers',  o[23],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	24, [ array: o[25],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	25, [ nil,  nil,  nil,  nil,  
		'-02TestTrailDrawing',  o[26],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-01TestTrailPosting',  o[27],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	28, [ array: o[29],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	29, [ nil,  nil,  nil,  nil,  
		nil,  nil,  '-000BasicSoundLib',  o[30],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-FromScCode.org',  o[39],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	30, [ array: o[31],  size: 7,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	31, [ '-PlayBufWithSynthDef',  o[32],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-PlayBuffer',  o[33],  
		nil,  nil,  'Pings',  o[34],  
		'-01SineWithFreq',  o[35],  nil,  nil,  
		'-02PwhiteDiatonic',  o[36],  'Ping',  o[37],  
		nil,  nil,  '-01SineWithoutFreqControl',  o[38] ],  
	// IdentityDictionary
	39, [ array: o[40],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	40, [ nil,  nil,  nil,  nil,  
		'endlessRogerCormanmovie',  o[41],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	42, [ array: o[43],  size: 4,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	43, [ '-000ScriptMixerRedo',  o[44],  'PhasorEnv',  o[52],  
		nil,  nil,  '-01BufferConfigWindow',  o[57],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-ScriptLibExtensions',  o[60],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	44, [ array: o[45],  size: 6,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	45, [ nil,  nil,  '-000NewProxyList',  o[46],  
		'-001ProxyControls',  o[47],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-002ProxyControls (+ Tabbed View)',  o[48],  nil,  nil,  
		'-000TestSound2freq',  o[49],  nil,  nil,  
		nil,  nil,  '-000TestSound',  o[50],  
		nil,  nil,  '-003Scopes',  o[51],  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	52, [ array: o[53],  size: 3,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	53, [ nil,  nil,  nil,  nil,  
		'PhasorEnv01',  o[54],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'PhasorEnv_NOTES',  o[55],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'PhasorEnv010',  o[56] ],  
	// IdentityDictionary
	57, [ array: o[58],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	58, [ '00BufferConfig',  o[59],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	60, [ array: o[61],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	61, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'EvalSnippets',  o[62],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'ScriptTest',  o[63],  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	64, [ array: o[65],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	65, [ nil,  nil,  '-00EarlyTests',  o[66],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-01GUIDesign',  o[71],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	66, [ array: o[67],  size: 3,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	67, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-01Analyse1File',  o[68],  '-02DoThisAfter01ToSeeData',  o[69],  
		'-OnsetTries0',  o[70],  nil,  nil ],  
	// IdentityDictionary
	71, [ array: o[72],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	72, [ nil,  nil,  nil,  nil,  
		nil,  nil,  '-00BasicIdea-UsingScriptLibForData',  o[73],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	74, [ array: o[75],  size: 5,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	75, [ 'SoundFiles',  o[76],  'Buffers-Autoload',  o[78],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'SynthDefs02-buffers',  o[80],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'ServerStuff',  o[83],  
		nil,  nil,  nil,  nil,  
		'SynthDefs01-simple',  o[86],  nil,  nil ],  
	// IdentityDictionary
	76, [ array: o[77],  size: 0,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	77, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	78, [ array: o[79],  size: 0,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	79, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	80, [ array: o[81],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	81, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'playbuf',  o[82],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	83, [ array: o[84],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	84, [ nil,  nil,  nil,  nil,  
		nil,  nil,  'BootDefaultServer',  o[85],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	86, [ array: o[87],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	87, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'ping',  o[88],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ]
];
prUnarchive(o,p);
