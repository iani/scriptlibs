var o, p;
o = [
	ScriptLib.prNew,  MultiLevelIdentityDictionary.prNew,  IdentityDictionary.prNew,  Array.prNew(32),  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:-001BlobRect2xMultiSampleTest
var b0 = 'AmericanBullFrog'.b, b1 = 'CopesGrayTreefrog'.b, b2 = 'CricketFrog'.b, b3 = 'EasternGreyTreefrog'.b, b4 = 'EasternAmericanFrog'.b, b5 = 'GreenFrog'.b, b6 = 'MinkFrog'.b, b7 = 'MorthernLeopardFrog'.b;

var samples1, samples2, sampleChanger, s1, s2, waitInterval = 10;
samples1 = Pseq([b0, b1, b2, b3]).asStream;
samples2 = Pseq([b4, b5, b6, b7]).asStream;

sampleChanger = {
	loop { | i |
		s1 = samples1.next;
		s2 = samples2.next;
		waitInterval.wait;
	}
}.fork;

~brects = [] add: BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), { | xy |
	Synth('playbuf', [buf: s1, attack: 1, release: 3, startPos: xy.x, rate: xy.x]);
}, { | xy, brect |
	brect.state.set(\\rate, xy.x);
}, { | state |
	state.free;
}).enable;

~brects = ~brects add: BlobRect(3001, Rect(0.5, 0.5, 0.3, 0.3), { | xy |
	Synth('playbufmagabove', [buf: s2, attack: 1, release: 3, startPos: xy.x,
		rate: xy.x + 0.7, magabove: xy.y * 15])},
{ | xy, brect |
	brect.state.set(\\rate, xy.x + 0.7, \\magabove, xy.y * 15);
}, { | state |
	state.free;
}).enable;

~stop = {
	~brects do: { | br | br.postln; br.disable };
	sampleChanger.stop;
};

",  IdentityDictionary.prNew,  Array.prNew(32),  "//:-006BlobRectArrayChangeRects

BlobRectArray(3001, 
[	Rect(0.001, 0.001, 0.3, 0.3),
	{ { WhiteNoise.ar(0.1) }.play; },
	{},
	{ | state | state.free }
],
[	Rect(0.6, 0.6, 0.3, 0.3),
	{ { SinOsc.ar(1000, 0, 0.5) }.play; },
	{},
	{ | state | state.free }
],
).enable.fork({ | bra |
	loop {
	10 do: {
		1.wait;
		bra.blobRects do: { | br |
			br.rect.width.postln;
			br.rect.width = br.rect.width / 2;
			[\"new width\", br.rect.width].postln;
			br.rect.height = br.rect.height / 2;
		};
	};
	10 do: {
		1.wait;
		bra.blobRects do: { | br |
			br.rect.width.postln;
			br.rect.width = br.rect.width * 2;
			[\"new width\", br.rect.width].postln;
			br.rect.height = br.rect.height * 2;
		};
	};
	};
});",  
	"//:-001BlobRectSoundTest
BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), {
	{ WhiteNoise.ar(0.1) }.play 
}, {}, { | state |
	state.free;
}).enable;

// BlobRects(3001);
// Blobs(3001).enable;",  "//:-004BlobRect2xSampleTest
var b0 = 'swallows10minL'.b;

~brects = [] add: BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), { | xy |
	Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: xy.x, rate: xy.x]);
}, { | xy, brect |
	brect.state.set(\\rate, xy.x);
}, { | state |
	state.free;
}).enable;

~brects = ~brects add: BlobRect(3001, Rect(0.5, 0.5, 0.3, 0.3), { | xy |
	Synth('playbufmagabove', [buf: b0, attack: 1, release: 3, startPos: xy.x,
		rate: xy.x + 0.7, magabove: xy.y * 15])},
{ | xy, brect |
	brect.state.set(\\rate, xy.x + 0.7, \\magabove, xy.y * 15);
}, { | state |
	state.free;
}).enable;

~stop = { ~brects do: { | br | br.postln; br.disable }; };

",  "//:-005BlobRectArrayTest

BlobRectArray(3001, 
[	Rect(0.001, 0.001, 0.3, 0.3),
	{ { WhiteNoise.ar(0.1) }.play; },
	{},
	{ | state | state.free }
],
[	Rect(0.6, 0.6, 0.3, 0.3),
	{ { SinOsc.ar(1000, 0, 0.5) }.play; },
	{},
	{ | state | state.free }
],
).enable;",  "//:-000BlobRectTest
BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), { \"starting\".postln; }, {}, { \"stopping\".postln; }).enable;

// BlobRects(3001);
// Blobs(3001).enable;",  
	"//:-002BlobRectx2SoundTest

~brects = [] add: BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), {
	{ WhiteNoise.ar(0.1) }.play 
}, {}, { | state |
	state.free;
}).enable;

~brects = ~brects add: BlobRect(3001, Rect(0.5, 0.5, 0.3, 0.3), {
	{ GrayNoise.ar(0.1) }.play 
}, {}, { | state |
	state.free;
}).enable;

~stop = { ~brects do: { | br | br.postln; br.disable }; };",  "//:-003BlobRectSampleTest
var b0 = 'swallows10minL'.b;

BlobRect(3001, Rect(0.01, 0.01, 0.3, 0.3), { | xy |
	Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: xy.x, rate: xy.x]);
}, { | xy, brect |
	brect.state.set(\\rate, xy.x);
}, { | state |
	state.free;
}).enable;


",  IdentityDictionary.prNew,  Array.prNew(64),  
	"//:-011OneBlobInRectRateXPos
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.1, 0.1, 0.3, 0.3);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos, rate: blob.x_pos])
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-007OneSoundProcessAtATimeOnly
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1) {
		{ WhiteNoise.ar(0.1) }.play.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification |
			notification.listener.postln;
			notification.listener.free;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  "//:-009OneBlobOnlyDependingOnX_posCorrect
var b0 = 'swallows10minL'.b;
var synth;

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { blob.x_pos > 0.5}) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos])
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | b.x_pos > 0.5 }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-008OneBlobOnlyDifferentStartingPoint
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1) {
		Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos])
		.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification | 
			notification.listener.release;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  
	"//:-011OneBlobInRectRateXposContinuous
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.1, 0.1, 0.3, 0.3);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos, rate: blob.x_pos])
	}
},
{ | blob | blob.set(\\rate, blob.x_pos) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-004BufferPlaybackEnv
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	{ | gate = 1 |
		var rate = 1, env, envgen;
		env = Env.linen(0.3, 0.1, 1, 3.5);
		envgen = EnvGen.kr(env, gate: gate, doneAction: 2);
		envgen * PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1)
	}.play;
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-006EnvDifferentStartingPoint
var b0 = 'swallows10minL'.b;

BlobWatcher(
{ | blob |
	Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos]);
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-003SimpleBufferPlayback
var b0 = 'swallows10minL'.b;

~simpleBlob = BlobWatcher(
{ | blob |
	var rate = 1;
	{ PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1) }.play;
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.free },
port: 3001
).enable;
",  
	"//:-005EnvSynth
var b0 = 'swallows10minL'.b;

BlobWatcher(
{ | blob |
	Synth('playbuf', [buf: b0, attack: 1, release: 3]);
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob | blob.state.release },
port: 3001
).enable;
",  "//:-002MappingParameters

BlobWatcher(
{ | blob |
	{ | freq = 400 | SinOsc.ar(freq, 0, 0.01) }.play(args: [\\freq, blob.x_pos]);
},
{ | blob | 
	// [\"moved:\", blob].postln 
},
{ | blob | 
	blob.free
},
mapper: BlobMapper(x_pos_map: \\freq.asSpec),
port: 3001,
).enable;
",  "//:-010OneBlobInRect
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.1, 0.1, 0.3, 0.3);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos])
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-000TestBlobs_EMPTY

~simpleBlob = BlobWatcher(
{ | blob |
	[\"started:\", blob].postln;
	blob.x_pos.postln;
},
{ | blob | [\"moved:\", blob].postln },
{ | blob | [\"ended:\", blob].postln },

port: 3001
).enable;
",  
	"//:-001SimpleBlobSound1
~simpleBlob = BlobWatcher(
{ | blob |
	{ | freq = 400 | SinOsc.ar(freq, 0, 0.1) }.play(args: [\\freq, 400 rrand: 4000]);
},
{ | blob | [\"moved:\", blob].postln },
{ | blob | blob.free },
port: 3001
).enable;
",  "//:---FreeAllBlobwatchers
Blobs(3001).free; // webcam
Blobs(3333).free; // kinect",  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:---FreeAllBlobwatchers
Blobs(3001).free; // webcam
Blobs(3333).free; // kinect
",  IdentityDictionary.prNew,  Array.prNew(32),  "//:-000OneBlobInRect01010303RateXposCont
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.1, 0.1, 0.3, 0.3);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos, rate: blob.x_pos])
	}
},
{ | blob | blob.set(\\rate, blob.x_pos) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  
	"//:-002SRect01010303RateXpCMagAboveYp
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.1, 0.1, 0.3, 0.3);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbufmagabove', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos,
			rate: blob.x_pos + 0.7, magabove: blob.y_pos * 15])
	}
},
{ | blob | synth.set(\\rate, blob.x_pos + 0.7, \\magabove, blob.y_pos * 15) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-003SRect07070303RateXpCMagAboveYp
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.4, 0.4, 0.2, 0.2);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbufmagbelow', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos,
			rate: blob.x_pos + 0.7, magbelow: blob.y_pos * 5 max: 0.51])
	}
},
{ | blob | synth.set(\\rate, blob.x_pos + 0.7, \\magbelow, blob.y_pos * 5 max: 0.51) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-001OneBlobInRect07070303RateXposCont
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.7, 0.7, 0.29, 0.29);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos, rate: blob.x_pos + 0.4])
	}
},
{ | blob | synth.set(\\rate, blob.x_pos + 0.4) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  "//:-004SRect01010303LoRateXpCMagAboveYp0
var b0 = 'swallows10minL'.b;
var synth, rect;
rect = Rect(0.4, 0.4, 0.2, 0.2);

~simpleBlob = BlobWatcher(
{ | blob |
	if (synth.isNil and: { rect.containsPoint((blob.x_pos@blob.y_pos)) }) {
		synth = Synth('playbufmagbelow', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos,
			rate: blob.x_pos + 0.17, magbelow: blob.y_pos * 5 max: 0.51])
	}
},
{ | blob | synth.set(\\rate, blob.x_pos + 0.17, \\magbelow, blob.y_pos * 5 max: 0.51) },
{ | blob |
	synth !? {
		if (blob.blobs.detect({ | b | rect.containsPoint(b.x_pos@b.y_pos) }).isNil) { synth.release; synth = nil }
	};
},
port: 3001
).enable;
",  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:-009OneBlobOnlyDependingOnX_pos
var b0 = 'swallows10minL'.b;

// NOTE: NOT

~simpleBlob = BlobWatcher(
{ | blob |
	if (blob.blobs.size == 1 and: { blob.x_pos.postln > 0.5 }) {
		Synth('playbuf', [buf: b0, attack: 1, release: 3, startPos: blob.x_pos.postln])
		.addNotifierOneShot(blob.watcher, \\blobsEnded, { | notification | 
			notification.listener.release;
		});
	}
},
{ | blob | /* blob.set(\\freq, freqSpec.map(blob.y_pos)) */ },
{ | blob |
	if (blob.blobs.size == 0) { blob.watcher.changed(\\blobsEnded) }
},
port: 3001
).enable;
",  IdentityDictionary.prNew,  
	Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  "//:000EVERYTHING_TOGETHER
{ WhiteNoise.ar(0.1) }",  
	IdentityDictionary.prNew,  Array.prNew(64),  "//:alexandra_cardenas01_proxy_style
/* by  alexandra cardenas */
{a=Dust;b=TRand;Splay.ar(Blip.ar(b.kr(1,40,a.kr(2.5)),b.kr(1,150,a.kr(0.5))!3),1,b.kr(0,1,a.kr(2)),b.kr(-1,1,a.kr(0.7)))}",  "//:tim_walters01_proxy_style
/* by  tim walters */
{HPF.ar(GVerb.ar(({|k|({|i|y=SinOsc;y.ar(i,y.ar(i+k**i)/Decay.kr(Impulse.kr(0.5**i/k),[1,2]+i,k))}!6).sum}!16).sum,1,1)/180,40)}",  
	"//:tim_walters01_proxy_style_with_parameters [impulse_rate: 0.1, 10]
/* by  tim walters */
{ | impulse_rate = 0.5 |
	HPF.ar(GVerb.ar(({|k|({|i|y=SinOsc;y.ar(i,y.ar(i+k**i)/Decay.kr(Impulse.kr(impulse_rate**i/k),[1,2]+i,k))}!6).sum}!16).sum,1,1)/180,40)
}",  "//:tim_walters01
/* by  dan stowell */
{ Klank.ar(`[(33,44..77).midicps,nil,0.1], SinOsc.ar(LFSaw.kr(1/60).exprange(0.01, 200)).exprange(100,1000)).dup/9 };
",  "//:alexandra_cardenas02_proxy_style
/* by  alexandra cardenas */
{d=Dust;r=TRand.kr(1,2,d.kr(1));z=TRand.kr(1,2,d.kr(2));l=LFClipNoise;Crackle.ar([z,r], 0.6)+SinOsc.ar([l.ar(r,60,90),l.ar(z,40,100)])}
",  "//:jonatan_liljedahl01_proxy_style
/* by  jonatan liljedahl */
{ | quotient = 1, triquot = 0.4 | x=0; (100..110).do{|f|f=f/ (2.5 * quotient) ;x=SinOsc.ar(f+[0,1],x*LFTri.kr(triquot,2).range(1.2,1.6))};x}
",  
	IdentityDictionary.prNew,  Array.prNew(32),  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:-PlayBufWithSynthDef
var b0 = 'a11wlk01-44_1'.b;
Synth('playbuf', [buf: b0]);",  "//:-PlayBuffer
var b0 = 'swallows'.b;
{ | rate = 1 | PlayBuf.ar(b0.numChannels, b0, rate * BufRateScale.kr(b0), loop: 1) };",  "//:Pings
{ { 100 do: { Synth(\\ping, [out: 2.rand, freq: 400.rrand(4000), dur: 0.01.exprand(1)]); 0.01.exprand(1).wait } }.fork; } ! 5;",  "//:-01SineWithFreq
{ | freq = 400 | SinOsc.ar(freq, 0, 0.1) }",  
	"//:-02PwhiteDiatonic
Pbind(\\degree, Pbrown(), \\dur, 0.1);",  "//:-00WhiteNoise
Synth('ping');",  "//:-01SineWithoutFreqControl
{ SinOsc.ar(400, 0, 0.1) }
",  IdentityDictionary.prNew,  
	Array.prNew(32),  "//:-01pvmagabovepshift
var b0 = 'swallows10minL'.b;

Synth('playbufmagabovepshift', [buf: b0, magabove: 5, pshift: 0.1]);",  "//:-01pvmagabove
var b0 = 'swallows10minL'.b;

Synth('playbufmagabove', [buf: b0, magabove: 10]);",  IdentityDictionary.prNew,  
	Array.prNew(32),  "//:endlessRogerCormanmovie‬
fork{
  loop{
    play{
     Splay.ar(
       {Klank.ar(`[99.rand*(1..9)],Crackle.ar(2,0.01))*LFGauss.ar(9,1/4,0,0,2)}!2
     )
    };
    1.wait;
  }
}; // ‪#endlessRogerCormanmovie‬",  IdentityDictionary.prNew,  Array.prNew(32),  
	IdentityDictionary.prNew,  Array.prNew(128),  "//:NorthernSpringPeeper
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/NorthernSpringPeeper.wav\"
).loadIfNeeded",  "//:swallows10minL
BufferItem(
\"/Users/iani2/Music/sounds/111202rhythmanalysis/swallows10minL.aiff\"
).loadIfNeeded",  
	"//:EasternAmericanFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/EasternAmericanFrog.wav\"
).loadIfNeeded",  "//:SmokyJungleFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/SmokyJungleFrog.wav\"
).loadIfNeeded",  "//:swallows
BufferItem(
\"/Users/iani2/Music/sounds/SoundSamplesJPH/swallows/swallows.wav\"
).loadIfNeeded",  "//:WoodFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/WoodFrog.wav\"
).loadIfNeeded",  
	"//:EasternGreyTreefrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/EasternGreyTreefrog.wav\"
).loadIfNeeded",  "//:MinkFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/MinkFrog.wav\"
).loadIfNeeded",  "//:CricketFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/CricketFrog.wav\"
).loadIfNeeded",  "//:MorthernLeopardFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/MorthernLeopardFrog.wav\"
).loadIfNeeded",  
	"//:AmericanBullFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/AmericanBullFrog.wav\"
).loadIfNeeded",  "//:CopesGrayTreefrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/CopesGrayTreefrog.wav\"
).loadIfNeeded",  "//:WesternChorusFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/WesternChorusFrog.wav\"
).loadIfNeeded",  "//:GreenFrog
BufferItem(
\"/Users/iani2/Dropbox/Persons+Projects/JPH2/SoundSamples/frogs/GreenFrog.wav\"
).loadIfNeeded",  
	IdentityDictionary.prNew,  Array.prNew(32),  "//:playbuf
SynthDef(\"playbuf\", { | out = 0, buf = 0, rate = 1, startPos = 0, loop = 1, attack = 0.01, release = 1, gate = 1, amp = 1 |
	var env, envgen;
	env = Env.asr(attack, 1, release);
	envgen = EnvGen.kr(env, gate, amp, doneAction: 2);
	Out.ar(out, envgen * 
		PlayBuf.ar(buf.numChannels, buf, rate * BufRateScale.kr(buf), 1, 
		startPos * BufFrames.kr(buf),
		loop, 
		doneAction: 2)
	)
}).add;",  "//:playbufmagabovepshift
SynthDef(\"playbufmagabovepshift\", { | out = 0, buf = 0, rate = 1, startPos = 0, loop = 1, attack = 0.01, release = 1, 
	gate = 1, amp = 1, pshift = 1,
	magabove = 0 |
	var env, envgen, source, chain;
	env = Env.asr(attack, 1, release);
	envgen = EnvGen.kr(env, gate, amp, doneAction: 2);
	source = envgen * 
		PlayBuf.ar(buf.numChannels, buf, rate * BufRateScale.kr(buf), 1, 
		startPos * BufFrames.kr(buf),
		loop, 
		doneAction: 2);
	chain = FFT(LocalBuf(2048), source);
	chain = PV_MagAbove(chain, magabove);
	Out.ar(out, PitchShift.ar(IFFT(chain), 0.2, pshift, 0, 0.1));
}).add;",  
	"//:playbufmagabove
SynthDef(\"playbufmagabove\", { | out = 0, buf = 0, rate = 1, startPos = 0, loop = 1, attack = 0.01, release = 1, 
	gate = 1, amp = 1,
	magabove = 0 |
	var env, envgen, source, chain;
	env = Env.asr(attack, 1, release);
	envgen = EnvGen.kr(env, gate, amp, doneAction: 2);
	source = envgen * 
		PlayBuf.ar(buf.numChannels, buf, rate * BufRateScale.kr(buf), 1, 
		startPos * BufFrames.kr(buf),
		loop, 
		doneAction: 2);
	chain = FFT(LocalBuf(2048), source);
	chain = PV_MagAbove(chain, magabove);
	Out.ar(out, IFFT(chain));
}).add;",  "//:playbufmagbelow
SynthDef(\"playbufmagbelow\", { | out = 0, buf = 0, rate = 1, startPos = 0, loop = 1, attack = 0.01, release = 1, 
	gate = 1, amp = 1,
	magbelow = 10 |
	var env, envgen, source, chain;
	env = Env.asr(attack, 1, release);
	envgen = EnvGen.kr(env, gate, amp, doneAction: 2);
	source = envgen * 
		PlayBuf.ar(buf.numChannels, buf, rate * BufRateScale.kr(buf), 1, 
		startPos * BufFrames.kr(buf),
		loop, 
		doneAction: 2);
	chain = FFT(LocalBuf(2048), source);
	chain = PV_MagBelow(chain, magbelow);
	Out.ar(out, IFFT(chain));
}).add;",  IdentityDictionary.prNew,  Array.prNew(32),  
	"//:BootDefaultServer
Server.default.boot;
",  IdentityDictionary.prNew,  Array.prNew(32),  "//:ping
SynthDef(\"ping\", { | out = 0, freq = 400, dur = 0.5, amp = 0.1 |
	Out.ar(out, 
		SinOsc.ar(freq, 0, 
			EnvGen.kr(Env.perc(releaseTime: dur - 0.01 max: 0.01, level: amp), doneAction: 2)
		)
	)
}).add;"
];
p = [
	// ScriptLib
	0, [ lib: o[1],  soundFilePath: nil ],  
	// MultiLevelIdentityDictionary
	1, [ dictionary: o[2] ],  
	// IdentityDictionary
	2, [ array: o[3],  size: 4,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	3, [ nil,  nil,  '----Narcissus----',  o[4],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'SoundCollections',  o[47],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-SoundTests',  o[60],  nil,  nil,  
		nil,  nil,  '---Config---',  o[78] ],  
	// IdentityDictionary
	4, [ array: o[5],  size: 6,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	5, [ '-05WebcamBlobRectsMultiSample',  o[6],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-04WebcamBlobRects',  o[9],  nil,  nil,  
		nil,  nil,  '-01BlobTestsWebcam',  o[18],  
		nil,  nil,  nil,  nil,  
		'-02BlobTestsKinect',  o[34],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-03WebcamVaryingSounds',  o[37],  'z03BlobTestsWebcamRejected',  o[44] ],  
	// IdentityDictionary
	6, [ array: o[7],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	7, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-001BlobRect2xMultiSampleTest',  o[8],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	9, [ array: o[10],  size: 7,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	10, [ '-006BlobRectArrayChangeRects',  o[11],  nil,  nil,  
		'-001BlobRectSoundTest',  o[12],  nil,  nil,  
		'-004BlobRect2xSampleTest',  o[13],  '-005BlobRectArrayTest',  o[14],  
		'-000BlobRectTest0',  o[15],  '-002BlobRectx2SoundTest',  o[16],  
		nil,  nil,  '-003BlobRectSampleTest',  o[17],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	18, [ array: o[19],  size: 14,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	19, [ nil,  nil,  nil,  nil,  
		'-011OneBlobInRectRateXPos',  o[20],  '-007OneSoundProcessAtATimeOnly',  o[21],  
		'-009OneBlobOnlyDependingOnX_posCorrect',  o[22],  '-008OneBlobOnlyDifferentStartingPoint',  o[23],  
		nil,  nil,  nil,  nil,  
		'-011OneBlobInRectRateXposContinuous',  o[24],  '-004BufferPlaybackEnv',  o[25],  
		'-006EnvDifferentStartingPoint',  o[26],  '-003SimpleBufferPlayback',  o[27],  
		nil,  nil,  '-005EnvSynth',  o[28],  
		'-002MappingParameters',  o[29],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-010OneBlobInRect',  o[30],  
		'-000TestBlobs_EMPTY',  o[31],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-001SimpleBlobSound1',  o[32],  
		'---FreeAllBlobwatchers',  o[33],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	34, [ array: o[35],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	35, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'---FreeAllBlobwatchers',  o[36],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	37, [ array: o[38],  size: 5,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	38, [ nil,  nil,  nil,  nil,  
		nil,  nil,  '-000OneBlobInRect01010303RateXposCont',  o[39],  
		nil,  nil,  nil,  nil,  
		'-002SRect01010303RateXpCMagAboveYp',  o[40],  nil,  nil,  
		nil,  nil,  '-003SRect07070303RateXpCMagAboveYp',  o[41],  
		nil,  nil,  nil,  nil,  
		'-001OneBlobInRect07070303RateXposCont',  o[42],  '-004SRect01010303LoRateXpCMagAboveYp0',  o[43],  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	44, [ array: o[45],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	45, [ nil,  nil,  '-009OneBlobOnlyDependingOnX_pos',  o[46],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	47, [ array: o[48],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	48, [ nil,  nil,  'SC140List+StealThisSound',  o[49],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'SC140-Andre_Bartetzki',  o[52],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	49, [ array: o[50],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	50, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '000EVERYTHING_TOGETHER',  o[51],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	52, [ array: o[53],  size: 6,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	53, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'alexandra_cardenas01_proxy_style',  o[54],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'tim_walters01_proxy_style',  o[55],  'tim_walters01_proxy_style_with_parameters',  o[56],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'dan_stowell_01_proxy_style',  o[57],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'alexandra_cardenas02_proxy_style',  o[58],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'jonatan_liljedahl01_proxy_style',  o[59] ],  
	// IdentityDictionary
	60, [ array: o[61],  size: 3,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	61, [ nil,  nil,  nil,  nil,  
		nil,  nil,  '-000BasicSoundLib',  o[62],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-001BufferDefs',  o[71],  '-FromScCode.org',  o[75],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	62, [ array: o[63],  size: 7,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	63, [ '-PlayBufWithSynthDef',  o[64],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  '-PlayBuffer',  o[65],  
		nil,  nil,  'Pings',  o[66],  
		'-01SineWithFreq',  o[67],  nil,  nil,  
		'-02PwhiteDiatonic',  o[68],  'Ping',  o[69],  
		nil,  nil,  '-01SineWithoutFreqControl',  o[70] ],  
	// IdentityDictionary
	71, [ array: o[72],  size: 2,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	72, [ nil,  nil,  '-01pvmagabovepshift',  o[73],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'-01pvmagabove',  o[74],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	75, [ array: o[76],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	76, [ nil,  nil,  nil,  nil,  
		'endlessRogerCormanmovie',  o[77],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	78, [ array: o[79],  size: 4,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	79, [ nil,  nil,  'Buffers-Autoload',  o[80],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'SynthDefs02-buffers',  o[96],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'ServerStuff',  o[102],  
		nil,  nil,  nil,  nil,  
		'SynthDefs01-simple',  o[105],  nil,  nil ],  
	// IdentityDictionary
	80, [ array: o[81],  size: 14,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	81, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'NorthernSpringPeeper',  o[82],  
		nil,  nil,  nil,  nil,  
		'swallows10minL',  o[83],  nil,  nil,  
		'EasternAmericanFrog',  o[84],  nil,  nil,  
		'SmokyJungleFrog',  o[85],  nil,  nil,  
		'swallows',  o[86],  'WoodFrog',  o[87],  
		nil,  nil,  nil,  nil,  
		'EasternGreyTreefrog',  o[88],  'MinkFrog',  o[89],  
		nil,  nil,  'CricketFrog',  o[90],  
		'MorthernLeopardFrog',  o[91],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'AmericanBullFrog',  o[92],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'CopesGrayTreefrog',  o[93],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'WesternChorusFrog',  o[94],  
		'GreenFrog',  o[95],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	96, [ array: o[97],  size: 4,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	97, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'playbuf',  o[98],  
		'playbufmagabovepshift',  o[99],  nil,  nil,  
		nil,  nil,  'playbufmagabove',  o[100],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  'playbufmagbelow',  o[101],  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	102, [ array: o[103],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	103, [ nil,  nil,  nil,  nil,  
		nil,  nil,  'BootDefaultServer',  o[104],  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ],  
	// IdentityDictionary
	105, [ array: o[106],  size: 1,  
		proto: nil,  parent: nil,  
		know: false ],  
	// Array
	106, [ nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil,  
		'ping',  o[107],  nil,  nil,  
		nil,  nil,  nil,  nil,  
		nil,  nil,  nil,  nil ]
];
prUnarchive(o,p);
